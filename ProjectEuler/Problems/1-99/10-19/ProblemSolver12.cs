using System;

namespace ProjectEuler.Problems
{
    internal class ProblemSolver12 : Solver
    {
        /* Highly divisible triangular number
         * 
         * The sequence of triangle numbers is generated by adding the natural numbers.
         * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
         * first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
         * 
         * Let us list the factors of the first seven triangle numbers:
         * 1: 1
         * 3: 1,3
         * 6: 1,2,3,6
         * 10: 1,2,5,10
         * 15: 1,3,5,15
         * 21: 1,3,7,21
         * 28: 1,2,4,7,14,28
         * 
         * We can see that 28 is the first triangle number to have over five divisors.
         * What is the value of the first triangle number to have over five hundred divisors?
         * 
         */

        protected override void DoCalculation()
        {
            long triangularNumber = 0, dividers = 0, number = 0;
            while (dividers < 502)
            {
                number++;
                long t = GetTriangularNumber(number), d = GetNumberOfDividersFromTriangularNumber(t);
                if (d > dividers)
                {
                    triangularNumber = t;
                    dividers = d;
                }
            }

            SetAnswer(triangularNumber);
        }

        public static long GetNumberOfDividersFromTriangularNumber(long number)
        {
            long factorCount = 0;
            long sqrt = (int) Math.Ceiling(Math.Sqrt(number));
            for (long i = 1; i < sqrt; i++)
                if (number % i == 0)
                    factorCount += 2;
            if (sqrt * sqrt == number)
                factorCount++;
            return factorCount;
        }

        public static long GetTriangularNumber(long number)
        {
            long returnValue = 0;
            for (long i = 1; i <= number; i++)
                returnValue += i;
            return returnValue;
        }
    }
}