{-
Problem description - Triangular, pentagonal, and hexagonal
-----------------------------------------------------------
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.
Find the next triangle number that is also pentagonal and hexagonal.

Problem analysis
----------------
- Make custom implementation for intersection of infinite lists.

Runtime information
-------------------
Compilation      ghc -O2 -threaded <filename>.hs
Execution        ./<filename> +RTS -N
                 for performance run output use: --output <filename>.html
Time             4.793 ms
Answer           1533776805
-}

-- import Criterion.Main

main :: IO()
main = print $ head (answer [])
-- main = defaultMain [bgroup "answer" [bench "default" $ whnf answer []]]

answer :: [Int] -> [Int]
answer is = intersectedElements is (1,1) (1,1) (1,1)

intersectedElements :: [Int] -> (Int,Int) -> (Int,Int) -> (Int,Int) -> [Int]
intersectedElements is tt pt ht
 | length is == 3   = is
 | t > p            = intersectedElements is tt (pentagonalNumber pt) ht
 | t > h            = intersectedElements is tt pt (hexagonalNumber ht)
 | t == p && t == h = intersectedElements (t:is) (triangleNumber tt) pt ht
 | otherwise        = intersectedElements is (triangleNumber tt) pt ht
 where t = snd tt
       p = snd pt
       h = snd ht

triangleNumber :: (Int,Int) -> (Int,Int)
triangleNumber nt = (n, div (n * n + n) 2)
 where n = fst nt + 1

pentagonalNumber :: (Int,Int) -> (Int,Int)
pentagonalNumber nt = (n, div (3 * n * n - n) 2)
 where n = fst nt + 1

hexagonalNumber :: (Int,Int) -> (Int,Int)
hexagonalNumber nt = (n, 2 * n * n - n)
 where n = fst nt + 1